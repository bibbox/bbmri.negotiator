/**
 * This class is generated by jOOQ
 */
package de.samply.bbmri.negotiator.jooq.tables;


import de.samply.bbmri.negotiator.jooq.Keys;
import de.samply.bbmri.negotiator.jooq.Public;
import de.samply.bbmri.negotiator.jooq.tables.records.DirectoryCatalogueRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Table to store directorys
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DirectoryCatalogue extends TableImpl<DirectoryCatalogueRecord> {

	private static final long serialVersionUID = -938376075;

	/**
	 * The reference instance of <code>public.directory_catalogue</code>
	 */
	public static final DirectoryCatalogue DIRECTORY_CATALOGUE = new DirectoryCatalogue();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<DirectoryCatalogueRecord> getRecordType() {
		return DirectoryCatalogueRecord.class;
	}

	/**
	 * The column <code>public.directory_catalogue.id</code>. primary key
	 */
	public final TableField<DirectoryCatalogueRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "primary key");

	/**
	 * The column <code>public.directory_catalogue.name</code>. The directory name
	 */
	public final TableField<DirectoryCatalogueRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "The directory name");

	/**
	 * The column <code>public.directory_catalogue.url</code>. The directory url
	 */
	public final TableField<DirectoryCatalogueRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "The directory url");

	/**
	 * The column <code>public.directory_catalogue.rest_url</code>. The directory API url
	 */
	public final TableField<DirectoryCatalogueRecord, String> REST_URL = createField("rest_url", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "The directory API url");

	/**
	 * The column <code>public.directory_catalogue.username</code>. The directories username
	 */
	public final TableField<DirectoryCatalogueRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "The directories username");

	/**
	 * The column <code>public.directory_catalogue.password</code>. The directoryíes password
	 */
	public final TableField<DirectoryCatalogueRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "The directoryíes password");

	/**
	 * The column <code>public.directory_catalogue.api_username</code>. The directories API username
	 */
	public final TableField<DirectoryCatalogueRecord, String> API_USERNAME = createField("api_username", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "The directories API username");

	/**
	 * The column <code>public.directory_catalogue.api_password</code>. The directories API password
	 */
	public final TableField<DirectoryCatalogueRecord, String> API_PASSWORD = createField("api_password", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "The directories API password");

	/**
	 * The column <code>public.directory_catalogue.resource_biobanks</code>. The directories biobank model
	 */
	public final TableField<DirectoryCatalogueRecord, String> RESOURCE_BIOBANKS = createField("resource_biobanks", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "The directories biobank model");

	/**
	 * The column <code>public.directory_catalogue.resource_collections</code>. The directories collection model
	 */
	public final TableField<DirectoryCatalogueRecord, String> RESOURCE_COLLECTIONS = createField("resource_collections", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "The directories collection model");

	/**
	 * The column <code>public.directory_catalogue.description</code>. The description for this directory
	 */
	public final TableField<DirectoryCatalogueRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "The description for this directory");

	/**
	 * The column <code>public.directory_catalogue.sync_active</code>.
	 */
	public final TableField<DirectoryCatalogueRecord, Boolean> SYNC_ACTIVE = createField("sync_active", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

	/**
	 * Create a <code>public.directory_catalogue</code> table reference
	 */
	public DirectoryCatalogue() {
		this("directory_catalogue", null);
	}

	/**
	 * Create an aliased <code>public.directory_catalogue</code> table reference
	 */
	public DirectoryCatalogue(String alias) {
		this(alias, DIRECTORY_CATALOGUE);
	}

	private DirectoryCatalogue(String alias, Table<DirectoryCatalogueRecord> aliased) {
		this(alias, aliased, null);
	}

	private DirectoryCatalogue(String alias, Table<DirectoryCatalogueRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "Table to store directorys");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<DirectoryCatalogueRecord, Integer> getIdentity() {
		return Keys.IDENTITY_DIRECTORY_CATALOGUE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<DirectoryCatalogueRecord> getPrimaryKey() {
		return Keys.DIRECTORY_CATALOGUE_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<DirectoryCatalogueRecord>> getKeys() {
		return Arrays.<UniqueKey<DirectoryCatalogueRecord>>asList(Keys.DIRECTORY_CATALOGUE_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DirectoryCatalogue as(String alias) {
		return new DirectoryCatalogue(alias, this);
	}

	/**
	 * Rename this table
	 */
	public DirectoryCatalogue rename(String name) {
		return new DirectoryCatalogue(name, null);
	}
}
